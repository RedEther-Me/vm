import {
  CPU,
  MemoryController,
  createMemory,
  BOOT_ADDRESS,
} from "@emulator/core";

const bios =


let machine;

const loadMedia = (file) => {
  const lines = file.match(/.{1,8}/g);

  lines.forEach((line, index) => {
    machine.mm.setUint8(BOOT_ADDRESS + index, parseInt(line, 2));
  });

  machine.cpu.reset();
};

// Initialize Machine
(() => {
  if (!machine) {
    const memory = createMemory(256 * 256);

    const mm = new MemoryController({
      listener: (data) => {
        console.log(data);
        process.send(data);
      },
    });
    mm.map("memory", memory, 0, 0xffff);

    const cpu = new CPU(mm, { logger: console });
    cpu.addListener("program", (data) => {
      process.send(data);
    });

    machine = {
      cpu,
      mm,
    };
  }
})();

process.on("message", ({ event, ...args }) => {
  console.log("--->", event);
  switch (event) {
    case "step": {
      machine.cpu.step();
      break;
    }
    case "run": {
      machine.cpu.run();
      break;
    }
    case "reset": {
      machine.cpu.reset();
      loadMedia(bios);
      break;
    }
    case "register-device": {
      const { name, from, to } = args;
      machine.mm.map(
        name,
        {
          getUint16: () => 0,
          getUint8: () => 0,
          setUint16: (address, data) => {
            process.send({ event: name, method: "setUint16", address, data });
          },
        },
        from,
        to
      );
      break;
    }
    default:
      break;
  }
});
